import re
import pandas as pd
from src.utils.util import clean_groups
from src.python_objects.base import Base
from collections import defaultdict
import os
import subprocess


class MatlabProgramRunner(Base):
    def __init__(self, conversion_years):
        super().__init__(conversion_years)
        self.conversion_years = conversion_years

    def write_matlab_params(self):
        # Get the list of files from the correct directory
        matrices_dir = self.data_path / "matrices"
        files = matrices_dir.glob("*.csv")

        # Extract the max groups
        result = self.extract_max_groups(files)

        # Prepare the output strings
        start_years = []
        end_years = []
        max_groups = []

        for (start, end), max_group in sorted(result.items()):
            start_years.append(str(start))
            end_years.append(str(end))
            max_groups.append(
                str(max_group)
            )  # We'll convert these back to integers in the output

        # Create the output directory if it doesn't exist
        output_dir = self.data_path / "temp"
        os.makedirs(output_dir, exist_ok=True)

        # Write to the file
        output_file = output_dir / "matlab_script_params.txt"
        with open(output_file, "w") as f:
            f.write("# Generated by generator_params.py\n\n")
            # Write each parameter on a new line
            f.write('START_YEARS="' + " ".join(start_years) + '"\n')
            f.write('END_YEARS="' + " ".join(end_years) + '"\n')
            f.write('MAX_GROUPS="' + " ".join(max_groups) + '"\n')

        print(f"Parameters written to {output_file}")

    def extract_max_groups(self, filenames):
        # Dictionary to store max group number for each year pair
        max_groups = defaultdict(int)

        # Regex pattern to extract years and group numbers
        pattern = r"start\.(\d+)\.end\.(\d+)\.group\.(\d+)\.csv"

        for file in filenames:
            match = re.search(pattern, file.name)
            if match:
                start_year = int(match.group(1))
                end_year = int(match.group(2))
                group_num = int(match.group(3))

                # Update max group if larger
                year_pair = (start_year, end_year)
                max_groups[year_pair] = max(max_groups[year_pair], group_num)

        return max_groups

    def run_matlab_optimization(self):
        script_dir = self.root_dir / "src" / "scripts"
        bash_script = script_dir / "run_matlab_optimization.sh"

        # os.chmod(bash_script, 0o755)

        try:
            subprocess.run(
                [
                    "matlab",
                    "-nodisplay",
                    "-batch",
                    "disp('MATLAB loaded successfully')",
                ],
                check=True,
            )
        except subprocess.CalledProcessError as e:
            raise ValueError(
                "Error; MATLAB either isn't installed or "
                "isn't properly added to your system's PATH"
                "environment variable"
            )

        try:
            result = subprocess.run(
                ["bash", bash_script], check=True, capture_output=True, text=True
            )

            self.logger.info("MATLAB optimization completed successfully")
            self.logger.info(f"Output: {result.stdout}")
            if result.stderr:
                self.logger.error("Errors:", result.stderr)

        except subprocess.CalledProcessError as e:
            self.logger.error(f"Error running MATLAB optimization: {e}")
            self.logger.error("Error output:", e.stderr)
        except Exception as e:
            self.logger.error(f"Unexpected error: {e}")
